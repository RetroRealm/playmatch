//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "game_file")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub size: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub crc: Option<String>,
    pub md5: Option<String>,
    pub sha1: Option<String>,
    pub sha256: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub status: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub serial: Option<String>,
    pub game_release_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game_release::Entity",
        from = "Column::GameReleaseId",
        to = "super::game_release::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GameRelease,
}

impl Related<super::game_release::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameRelease.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
