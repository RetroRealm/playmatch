//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::GameReleaseProviderEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "game_release")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub game_release_provider: GameReleaseProviderEnum,
    #[sea_orm(column_type = "Text", nullable)]
    pub platform_company: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub platform: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub game_id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub categories: Option<Vec<String>>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_file::Entity")]
    GameFile,
    #[sea_orm(has_many = "super::game_release_id_mapping::Entity")]
    GameReleaseIdMapping,
}

impl Related<super::game_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameFile.def()
    }
}

impl Related<super::game_release_id_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameReleaseIdMapping.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
