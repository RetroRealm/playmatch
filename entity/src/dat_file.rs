//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "dat_file")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub name: String,
	pub company_id: Option<Uuid>,
	pub platform_id: Uuid,
	pub current_version: String,
	pub signature_group_id: Uuid,
	pub tags: Option<Vec<String>>,
	pub subset: Option<String>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::company::Entity",
		from = "Column::CompanyId",
		to = "super::company::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	Company,
	#[sea_orm(has_many = "super::dat_file_import::Entity")]
	DatFileImport,
	#[sea_orm(
		belongs_to = "super::platform::Entity",
		from = "Column::PlatformId",
		to = "super::platform::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	Platform,
	#[sea_orm(
		belongs_to = "super::signature_group::Entity",
		from = "Column::SignatureGroupId",
		to = "super::signature_group::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	SignatureGroup,
}

impl Related<super::company::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Company.def()
	}
}

impl Related<super::dat_file_import::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DatFileImport.def()
	}
}

impl Related<super::platform::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Platform.def()
	}
}

impl Related<super::signature_group::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::SignatureGroup.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
